/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

export type Decimal = string;
export interface InstantiateMsg {
  action_time_window: number;
  authority_fee: Decimal;
  certificate_types: CertificateType[];
  denom: string;
  marketplace_fee: Decimal;
  marketplace_owner_address: string;
}
export interface CertificateType {
  description: string;
  id: number;
  name: string;
}
export type ExecuteMsg = {
  assign_device_to_user: {
    device_address: string;
    user_address: string;
  };
} | {
  accept_device: {
    device_address: string;
    device_location: string;
    device_name: string;
    user_address: string;
  };
} | {
  create_user_certificates: {
    allowed_authorities: string[];
    certificate_type_id: number;
    device_address: string;
    measurements: number[];
    owner: string;
  };
} | {
  add_measurement: {
    active_power: number;
    device_address: string;
    metadata: string;
    reverse_power: number;
    timestamp: Timestamp;
  };
} | {
  add_certificate_to_marketplace: {
    certificate_id: number;
    owner: string;
    price: number;
  };
} | {
  buy_certificate: {
    buyer: string;
    marketplace_certificate_id: number;
  };
} | {
  burn_certificate: {
    certificate_id: number;
    device_address: string;
    owner: string;
  };
} | {
  authorize_certificate: {
    authorizer: string;
    certificate_id: number;
    user_address: string;
    valid_until: Timestamp;
  };
};
export type Timestamp = Uint64;
export type Uint64 = string;
export type QueryMsg = {
  params: {};
} | {
  device: {
    device_address: string;
  };
} | {
  devices: {};
} | {
  marketplace_certificates: {};
} | {
  marketplace_certificate: {
    id: number;
  };
} | {
  certificate_type: {
    id: number;
  };
} | {
  certificate_types: {};
} | {
  user_devices: {
    owner: string;
  };
} | {
  all_user_devices: {};
} | {
  user_certificates: {
    owner: string;
  };
} | {
  all_user_certificates: {};
};
export type MigrateMsg = string;
export type CertificateStatus = "UnknownCertificateStatus" | "Valid" | "Invalid" | "OnMarketplace" | "Burned";
export interface UserCertificatesAllResponse {
  all_user_certificates: UserCertificates[];
}
export interface UserCertificates {
  certificates: Certificate[];
  owner: string;
}
export interface Certificate {
  allowed_authorities: string[];
  authority: string;
  certificate_status: CertificateStatus;
  certificate_type_id: number;
  device_address: string;
  id: number;
  measurements: Measurement[];
  power: number;
  valid_until?: Timestamp | null;
}
export interface Measurement {
  active_power: number;
  fulfilled_active_power: FulfilledActivePower[];
  id: number;
  metadata: string;
  reverse_power: number;
  timestamp: Timestamp;
  used_for_certificate: boolean;
}
export interface FulfilledActivePower {
  amount: number;
  certificate_id: number;
}
export interface UserDevicesAllResponse {
  all_user_devices: UserDevices[];
}
export interface UserDevices {
  devices: UserDevice[];
  owner: string;
}
export interface UserDevice {
  device_address: string;
  location: string;
  name: string;
}
export interface CertificateTypeResponse {
  certificate_type: CertificateType;
}
export interface CertificateTypeAllResponse {
  certificate_types: CertificateType[];
}
export interface DeviceResponse {
  device: Device;
}
export interface Device {
  device_address: string;
  energy_consumed_sum: number;
  energy_produced_sum: number;
  fulfilled_energy_consumed: number;
  measurements: Measurement[];
  used_energy_produced: number;
}
export interface DevicesResponse {
  devices: Device[];
}
export interface MarketplaceCertificateResponse {
  marketplace_certificate: CertificateOffer;
}
export interface CertificateOffer {
  authorizer: string;
  buyer: string;
  certificate_id: number;
  id: number;
  measurements: Measurement[];
  owner: string;
  power: number;
  price: number;
  valid_until: Timestamp;
}
export interface MarketplaceCertificatesResponse {
  marketplace_certificates: CertificateOffer[];
}
export interface ParamsResponse {
  params: Params;
}
export interface Params {
  action_time_window: number;
  authority_fee: Decimal;
  denom: string;
  marketplace_fee: Decimal;
  marketplace_owner_address: string;
}
export interface UserCertificatesResponse {
  user_certificates: UserCertificates;
}
export interface UserDevicesResponse {
  user_devices: UserDevices;
}